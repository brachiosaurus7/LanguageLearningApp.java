import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.ArrayList;
import java.util.Collections;

public class GermanSentenceFormationGame extends JFrame implements ActionListener {
    private ArrayList<String> words;
    private JButton[] wordButtons;
    private JButton submitButton;
    private JLabel instructionLabel;
    private JLabel scoreLabel;
    private JLabel roundLabel;
    private JTextField userInputField;
    private JPanel centerPanel;
    private final int MAX_ROUNDS = 10;
    private int score;
    private int round;
    private String currentSentence;

    private static final String CREATE_TABLE_SQL = "CREATE TABLE sentences_german (id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, sentence VARCHAR2(255))";
    @SuppressWarnings("unused")
    private static final String SELECT_ALL_SQL = "SELECT * FROM sentences_german";
    private static final String INSERT_SQL = "INSERT INTO sentences_german (sentence) VALUES (?)";
    private static final String SELECT_RANDOM_SQL = "SELECT sentence FROM (SELECT sentence FROM sentences_german ORDER BY DBMS_RANDOM.VALUE) WHERE ROWNUM = 1";

    public GermanSentenceFormationGame() {
        setTitle("German Sentence Formation Game");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setPreferredSize(new Dimension(1540, 820));
        setLayout(new BorderLayout());

        getContentPane().setBackground(Color.WHITE);

        initializeComponents();
        initializeDatabase();
        restartGame();

        pack();
        setVisible(true);
    }

    private void initializeComponents() {
        userInputField = new JTextField(80);
        userInputField.setEditable(true);

        centerPanel = new JPanel();
        centerPanel.setLayout(new FlowLayout());

        JPanel southPanel = new JPanel();
        southPanel.setLayout(new FlowLayout());

        instructionLabel = new JLabel("Input the sentence correctly:");
        add(instructionLabel, BorderLayout.NORTH);

        scoreLabel = new JLabel("Score: 0");
        southPanel.add(scoreLabel);

        roundLabel = new JLabel("Round: 1");
        southPanel.add(roundLabel);

        userInputField = new JTextField(40);
        southPanel.add(userInputField);

        submitButton = new JButton("Submit");
        submitButton.addActionListener(this);
        southPanel.add(submitButton);

        instructionLabel.setForeground(Color.BLACK);
        scoreLabel.setForeground(Color.RED);
        roundLabel.setForeground(Color.BLACK);
        userInputField.setForeground(Color.BLACK);

        add(centerPanel, BorderLayout.CENTER);
        add(southPanel, BorderLayout.SOUTH);
    }

    private void initializeDatabase() {
        try (Connection connection = DriverManager.getConnection(Main.getUrl(), Main.getUsername(), Main.getPassword());
             Statement statement = connection.createStatement()) {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet resultSet = metaData.getTables(null, null, "SENTENCES_GERMAN", null);
            if (!resultSet.next()) {
                statement.executeUpdate(CREATE_TABLE_SQL);
                PreparedStatement insertStatement = connection.prepareStatement(INSERT_SQL);
                for (String sentence : getSentences()) {
                    insertStatement.setString(1, sentence);
                    insertStatement.executeUpdate();
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private ArrayList<String> getSentences() {
        ArrayList<String> sentences = new ArrayList<>();
        Collections.addAll(sentences,
                "Das ist ein einfaches Beispiel.",
                "Das Spiel macht Spaß.",
                "Ich lerne Deutsch gerne.",
                "Wir gehen ins Kino am Samstag.",
                "Mein Hund ist sehr freundlich.",
                "Der Himmel ist blau.",
                "Das Essen schmeckt lecker.",
                "Sie spielt gerne Musik.",
                "Der Zug fährt um 10 Uhr ab.",
                "Er liest ein Buch im Park.");
        return sentences;
    }

    private void restartGame() {
        round++;
        updateRoundLabel();

        currentSentence = fetchRandomSentenceFromDatabase();
        String[] wordBank = currentSentence.split("\\s+");
        words = new ArrayList<>();
        Collections.addAll(words, wordBank);
        Collections.shuffle(words);
        Color buttonColor = new Color(169, 169, 169);
        centerPanel.removeAll();
        wordButtons = new JButton[wordBank.length];
        for (int i = 0; i < wordBank.length; i++) {
            wordButtons[i] = new JButton(words.get(i));
            wordButtons[i].addActionListener(this);
            wordButtons[i].setPreferredSize(new Dimension(150, 60));
            wordButtons[i].setBackground(buttonColor);
            centerPanel.add(wordButtons[i]);
        }

        centerPanel.revalidate();
        centerPanel.repaint();
    }

    private String fetchRandomSentenceFromDatabase() {
        String sentence = "";
        try (Connection connection = DriverManager.getConnection(Main.getUrl(), Main.getUsername(), Main.getPassword());
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(SELECT_RANDOM_SQL)) {
            if (resultSet.next()) {
                sentence = resultSet.getString("sentence");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return sentence;
    }

    private void updateScoreLabel() {
        scoreLabel.setText("Score: " + score);
    }

    private void updateRoundLabel() {
        roundLabel.setText("Round: " + round);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        if (source == submitButton) {
            String userSentence = userInputField.getText().trim();
            if (isCorrectSentence(userSentence)) {
                JOptionPane.showMessageDialog(this, "Congratulations! You formed the correct sentence!");
                score++;
                updateScoreLabel();
            } else {
                JOptionPane.showMessageDialog(this, "Sorry, incorrect sentence. Try again!");
            }

            if (round < MAX_ROUNDS) {
                restartGame();
            } else {
                int choice = JOptionPane.showConfirmDialog(this, "Do you wish to play again?\nYour score: " + score, "Game Over", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    round = 0;
                    score = 0;
                    updateRoundLabel();
                    updateScoreLabel();
                    restartGame();
                } else {
                    System.exit(0);
                }
            }

            userInputField.setText("");
        } else {
            for (JButton button : wordButtons) {
                if (source == button) {
                    String buttonText = button.getText();
                    userInputField.setText(userInputField.getText() + " " + buttonText);
                    break;
                }
            }
        }
    }

    private boolean isCorrectSentence(String userSentence) {
        return userSentence.equalsIgnoreCase(currentSentence);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(GermanSentenceFormationGame::new);
    }
}
